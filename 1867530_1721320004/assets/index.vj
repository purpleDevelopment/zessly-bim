function addSlashes (str) {

    return (str + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0').replace("\"","");
}

/**
    Pitcher calls this function on page scroll. Important: Do not add listeners on Page Init or Page Load, as those can be called when the page is cached! Instead please override the PitcherInit function.
	@override
 */
function pitcherInit(){
	if (parent)
		addTouchHandler();
}

//global variables
var notesShown = false;
var isTwoD = false;
var isPitching = false;
var isAnimated = false;
var blockInteraction = false;
var hasHotspots = false;

/**
    Pitcher Remote Control calls this function to check if this specific slide has notes
    @param {string} title - The title of the book.
	@return {number} The circumference of the circle.
 */
//remote control related functions

/**
    Pitcher Remote Control calls this function to check if this specific slide has notes
 	@return {string} YES/NO
 */
function hasNotes() {
	var hasNotes = $(".notes").html() != null;
	if (hasNotes) return "YES";
	else return "NO";
}

/**
    Pitcher Remote Control calls this function to get the notes
 	@return {string} Contents of the notes to be visible on the device.
 */
function getNotes() {
	return $.trim($(".notes").html().replace(/(<([^>]+)>)/ig, ""));
}

/**
    Adds listeners to update remote devices on video start/pause
 */
function addVideoListeners() {
	try {
		var myVideo = document.getElementById('embeddedVideo');
		myVideo.addEventListener('playing', sendVideoPlay, false);
		myVideo.addEventListener('pause', sendVideoPlay, false);
	} catch (e) {

	}
}

/**
    Listener function to update the status of the video on remote start/pause
 */
function toggleChart() {
	var myVideo = document.getElementById('embeddedVideo');
	if (myVideo != null) {
		if (myVideo.paused == false) {
			myVideo.pause();
		} else {
			myVideo.play();
		}
	}
}

/**
    Communicates with Pitcher framwork to send video messages
 */
function sendVideoPlay() {

	var myVideo = document.getElementById('embeddedVideo');
	if(myVideo.currentTime == 0 && videoHotspot!=null && videoHotspot.thirdParameter > 0){
		myVideo.currentTime = videoHotspot.thirdParameter;
	}
	Ti.App.fireEvent('oPSend');
}

/**
    Reaction function on clicking on OK or the image on remote control.
 */
function okPressedFromRemote() {
	try {
		var video = document.getElementById('embeddedVideo');
		if (video.paused == false) {
			video.pause();
		} else {
			video.play();
		}
		return;
	} catch (e) {

	}
	try {
		toggleChart();
	} catch (e) {

	}
}

//helpers
/**
    Gets the basename of a file path.
    @param {string} path - Full disk path
    @param {string} suffix - A text to remove, such as an extension
	@return {string} Basename of the file path
 */
function basename(path, suffix) {
	var b = path.replace(/^.*[\/\\]/g, '');
	if (typeof(suffix) == 'string' && b.substr(b.length - suffix.length) == suffix) {
		b = b.substr(0, b.length - suffix.length);
	}
	return b;
}

/**
    Gets the basename of a file path.
    @param {string} path - Full disk path
    @param {string} suffix - A text to remove, such as an extension
	@return {string} Basename of the file path
 */
function getPageNumber() {
	var currentPage = window.location.href;
	var basenameV = basename(currentPage, ".html");
	var lastPart = basenameV.replace("slide", "");
	var pageNumber = parseInt(lastPart);
	return pageNumber;
}

/**
    Gets the url parameters of the existing page
    @param {string} name - A certain parameter name, similar to PHPs $_GET function
	@return {string} value - returns the current value of the parameter provided
 */
function gup(name) {
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS);
	var results = regex.exec(window.location.href);
	if (results == null) return "";
	else return results[1];
}


//access methods used to launch other contents

/**
    Launches another online page.
    @param {string} pageURL - http:// or https:// full link
    @param {string} title - Title to be rendered
 */
function showPage(pageURL, title) {
	Ti.App.fireEvent('loadWebPage', {
		'urlValue': pageURL,
		'title': pageURL,
		'showBar': true,
		'allowPortrait': true
	});
}

/**
    Tells Pitcher to jump to another page. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
    @param {integer} page - Page #, 0 based
 */
function gotoPage(page) {
	Ti.App.fireEvent('gotoVSlideH', {
		'p': page
	});
	Ti.App.fireEvent('closeOpenModal', {});
}

/**
    Tells Pitcher to go back one page, you can use this function to automatically calculate the previous page before a jump
 */
function goBack() {

	Ti.App.fireEvent('goBackToLastSlide', {});
}


/**
    Tells Pitcher to close the active presentation
 */
function closePresentation() {

	Ti.App.fireEvent('closeScrollWeb');
}


/**
    Tells Pitcher to send a custom event to Pitcher Insight engine. You can use this function to keep track of custom clicks
 */
function customEvent(eventName) {
	Ti.App.fireEvent('sendStatsFromHTML', {
		'event_name': "customPresEvent",
		'event_params': eventName,
		'event_extra': getPageNumber()
	});
}


/**
    Tells Pitcher to launch the PDF. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
    @param {string} filename - Full link to the PDF file on disk
    @param {string} title - Title to be rendered
    @param {string} launchMode - Advanced or Basic mode to be used by default
    @param {string} lockMode - Enable or Disable annotations
    @param {string} references - Custom References to be added (standard References will be ignored)
    @param {string} subFolder - Directory of the PDF on disk
    @param {integer} jumpPage - Page to launch PDF on. 1 based
    @param {integer} fileID - Pitcher file ID, important for links to function properly
 */
function showPDF(filename, title, launchMode, lockMode, references, subFolder, jumpPage, fileID) {
	if(fileID==null){
		var openPath = subFolder+"/"+filename;
		var pathP = document.location.href;
		pathP = pathP.replace("file://","");
		pathP = pathP.replace("//","/");
		var partsP = pathP.split("/");
		var nPartsP = [];
		var hasFound = false;
		for(var i = 0;i<partsP.length;i++){
			if(partsP[i].indexOf("slides")==-1){
				if(hasFound == false){
					//nPartsP.push(partsP[i]);
				}
				else{
					nPartsP.push(partsP[i]);
					break;
				}

			}
			else{
				nPartsP.push(partsP[i]);
				hasFound = true;
			}
		}
		var currentFolder = nPartsP.join("/")+"/";
		var pdfName = basename(openPath,".pdf");
		var pdfPath = currentFolder+openPath.replace(basename(openPath),"").replace("./","");
		var pdfFile = basename(openPath);

		Ti.App.fireEvent('loadPDF', {
			'file': pdfFile,
			'titleV': title,
			'viewMode': 1,
			'annotationEnabled': true,
			"subFolder":pdfPath,
			'fileData':{
				"uploaderType": null,
				"ID": "0",
				"body": "",
				"author": "",
				"keywords": "",
				"referencesV": null,
				"typeV": "0|0",
				"source": "",
				"vUrl": "",
				"year": "0",
				"edit_time": "2014-01-01 19:35:10",
				"category": "pdf",
				"extra": "1",
				"vVersion": 1388950510,
				"extra2": "1|1",
				"server": null,
				"uploaded_by": "1",
				"convertedSize": "",
				"vType": "",
				"bucket": "",
				"startDate": 1388950452,
				"endDate": 1420486455,
				"thumb": "thumbs/.png"
			}
		});
	}
	else{
		Ti.App.fireEvent('loadPDF', {
			'file': filename,
			'titleV': title,
			'viewMode': launchMode,
			'lockViewMode': lockMode,
			'references': null,
			'articles': null,
			'annotationEnabled': true,
			"subFolder": subFolder,
			'jumpToPage': (jumpPage - 1),
			'pdfID': fileID
		});
	}

}

/**
    Tells Pitcher to launch the 3D file. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
    @param {string} filename - Full link to the 3D file on disk
    @param {integer} fileID - Pitcher file ID, important for links to function properly
 */
function load3D(filename, fileID) {
	var folders = filename.split("/");
	if (folders.length != 0) {
		Ti.App.fireEvent('loadThreeD', {
			'model': folders[1],
			'folder': folders[0],
			'title': 'Pre Treatment CT - Dicom',
			'fileID': fileID
		});
	} else {
		Ti.App.fireEvent('loadThreeD', {
			'model': filename,
			'title': 'Pre Treatment CT - Dicom',
			'fileID': fileID
		});
	}

}

function loadMolecule(filename,title,fileID){
	var folders = filename.split("/");
	if(folders.length!=0){

		Ti.App.fireEvent('loadMolecule',{'model':folders[1],'folder':folders[0],'title':title,'fileID':fileID});
	}
	else{
		Ti.App.fireEvent('loadMolecule',{'model':filename,'title':title,'fileID':fileID});

	}
}

/**
    Tells Pitcher to launch the Presentation. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
    @param {integer} ID - Pitcher file ID
    @param {integer} subID - Sub page to start the presentation on, 1 based
 */
function showPresentation(ID, subID) {
	Ti.App.fireEvent('launchContentWithID', {
		'fileID': ID,
		'subID': subID
	});
}

/**
    Tells Pitcher to launch the Video. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
   	@param {string} filename - Full link to the video file on disk
	param {boolean} isOnline - Whether online connection is necessary to play the video
    param {integer} fileID - Pitcher file ID, important for links to function properly
 */
function playVideo(filename, isOnline, fileID) {
	Ti.App.fireEvent('loadMovie', {
		'file': filename,
		'isOnline': isOnline,
		'fileID': fileID
	});
}

/**
    Tells Pitcher to launch a survey. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
   	@param {string} url - Full link to the survey folder on disk
	param {string} title - Title to be rendered
    param {integer} fileID - Pitcher file ID, important for links to function properly
 */
function showSurvey(url, title, fileID) {
	Ti.App.fireEvent('loadWebPageFromFolder', {
		'urlValue': url.replace(".zip", "").replace("surveys", "") + "/index.html",
		'title': title,
		'showBar': true,
		'folderName': "surveys",
		'allowPortrait': false,
		'fileID': fileID
	});

}

/**
    Tells Pitcher to launch an HTML5 file uploaded by the CMS. You can also use pitcherFile://#/# annotation. For more info please see the Developer manual
   	@param {string} url - Full link to the survey folder on disk
	param {string} title - Title to be rendered
    param {integer} fileID - Pitcher file ID, important for links to function properly
 */
function showZip(url, title, fileID) {
	Ti.App.fireEvent('loadWebPageFromFolder', {
		'urlValue': url.replace(".zip", "").replace("zip", "") + "/index.html",
		'title': title,
		'showBar': true,
		'folderName': "zip",
		'allowPortrait': false,
		'fileID': fileID
	});

}





//core functionality that Pitcher uses for rendering HTML5 generated by Conversion Engine

/**
    Pitcher calls this function on page scroll. Important: Do not add listeners on Page Init or Page Load, as those can be called when the page is cached! Instead please override the PitcherInit function.
    @param {boolean} isPitchingV - A boolean value representing whether Pitcher is in a 'call' mode or not, so certain layers can be hidden/visible, such as hotspot opacity
	@param {boolean} isTwoDV - A boolean value representing whether Pitcher is set up to utilize 2D navigation mode, so gestures can be adjusted accordingly.
 */
function scrolled(isPitchingV, isTwoDV) {
	if (isTwoDV == true) {
		isTwoD = isTwoDV;
	}
	if (isPitchingV == true) {
		isPitching = isPitchingV;
	}
	$("#animationButton").hide();
	console.log("isAnimated:" + isAnimated);
	if (isAnimated) {
		goToAnimation();
	} else {

		$('#mainImage').retina();
	}
	pitcherInit();
}

/**
    Pitcher uses this function to check if a slide is animated, if yes, it launches Animation.html with the necessary page #
 */
function goToAnimation() {
	if (isAnimated) { //check if has animation
		blockInteraction = true;
		var pageNumber = getPageNumber() - 1;
		var urlV = window.location.href;
		var folders = urlV.split("/");
		var folder = folders[folders.length - 2];
		var parameters = {};
		parameters.pageNumber = pageNumber;
		parameters.isPitching = isPitching;
		parameters.isTwoD = isTwoD;
		Ti.App.fireEvent('loadWebPageFromSlides', {
			'urlValue': "animation.html",
			"parameters": parameters,
			'hasHotspots': hasHotspots,
			'colorBack': 'transparent',
			'folderName': folder
		});
		$("#animationButton").hide();
		setTimeout("showAnimationButton();", 2000);
	}
}

/**
    For animated slides, Pitcher shows the animation dots.
 */
function showAnimationButton() {
	$("#animationButton").show();
	blockInteraction = false;
}


/**
    As webview doesn't support persistent cookies, this function can be used to make persistent values stored in Pitcher encrypted database
 */
function setCookie(value) {

	Ti.App.fireEvent('setLastPage', {
		'p': value
	});
}


/**
    By default Pitcher hides tap highlight color and calls it's JSON loader
 */
$(document).ready(function() {
	document.documentElement.style.webkitTapHighlightColor = "rgba(0,0,0,0.0)";
	try{
		Ti.App.fireEvent('loaded');
		loadJSON();	
	}
	catch(e){
	
	}
	
});

/**
    This function parses the JSON, adds hotspots, puts the thermometer on the left side, and starts automatically converted animation is page is marked as animated.
 */

var videoHotspot = null;
function loadJSON(){
	$('body').append("<div onTouchStart='sendCLM(event);' style='width:80px;height:768px;position:absolute;top:0px;left:0px;'>&nbsp;</div>");
	
	var currentLocationArray = window.location.href.split("/");
	var currentLocation = currentLocationArray[currentLocationArray.length - 1];


	
	var jsonBody = $.ajax({
		url: currentLocation.replace("html", "json"),
		async: false
	}).responseText;
	if (jsonBody != null && jsonBody != "") {

		var slideJSON = JSON.parse(jsonBody);
		var ratio = 2.56;
		if (slideJSON.isAnimated == true) {
			isAnimated = true;
			$('body').append("<div onClick=\"goToAnimation();\" style=\"position:absolute; top:0px;left:0px;width:1024px; height:768px;\" >&nbsp;</div>");
		}
		if (slideJSON.hotspots != null && slideJSON.hotspots.length > 0) {
			for (var i = 0; i < slideJSON.hotspots.length; i++) {
				var hotspot = slideJSON.hotspots[i];
				var launchString = "";
				var targetObject = hotspot.actionParameter;
				targetObject.body = addSlashes(targetObject.body);
				switch (hotspot.actionID) {
				case "jumpPres":
					launchString = "gotoPage(" + (hotspot.actionParameter - 1) + ");";
					break;
				case "launchPres":
					switch (targetObject.category) {
					case "3D":
						launchString = 'load3D(\'3DModels/' + targetObject.filename + '\',' + targetObject.ID + ');';
						break;
					case "molecule":
						launchString = 'loadMolecule(\'3DModels/' + targetObject.filename + '\',\'' + targetObject.body + '\',' + targetObject.ID + ');';
						break;
					case "pdf":
						launchString = 'showPDF(\'pdfs/' + targetObject.filename + '\',\'' + targetObject.body + '\',1,null,null,null,' + hotspot.secondParameter + ',' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "brochure":
						launchString = 'showPDF(\'pdfs/' + targetObject.filename + '\',\'' + targetObject.body + '\',2,null,null,null,1,' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "video":
						launchString = 'playVideo(\'videos/' + targetObject.filename + '\',0,' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "video-online":
						launchString = 'playVideo(\'videos/' + targetObject.filename + '\',1,' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "surveys":
						launchString = 'showSurvey(\'' + targetObject.filename + '\',\'' + targetObject.body + '\',' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "zip":
						launchString = 'showZip(\'' + targetObject.filename + '\',\'' + targetObject.body + '\',' + targetObject.ID + ');';
						hasHotspots = true;
						break;
					case "presentation":
						launchString = 'showPresentation(' + targetObject.ID + ',' + hotspot.secondParameter + ')';
						break;
					default:
						break;
					}

					break;
				case "exitPres":
					launchString = "closePresentation();";
					break;

				case "goBack":
					launchString = "goBack();";
					break;	
				case "startAnimation":
					launchString = "goToAnimation();";
					break;
				case "gotoURL":
					launchString = "showPage('" + hotspot.actionParameter + "');";
					break;
				case "reportPres":
					launchString = "customEvent('" + hotspot.actionParameter + "');";
					break;
				default:
					break;
				}
				var hotspotRight = hotspot.width+hotspot.x;
				if(hotspotRight>398){
					hotspot.width -= hotspotRight - 398;
				}
				var hotspotBottom = hotspot.height+hotspot.y;
				if(hotspotBottom>298){
					hotspot.height -= hotspotBottom - 298;
				}
				
				if (targetObject != null && targetObject.category != null && targetObject.category == "video" && hotspot.secondParameter == "1") {
					videoHotspot = hotspot;
					$('body').append("<div style=\"top:" + hotspot.y * ratio + "px;left:" + hotspot.x * ratio + "px;width:" + hotspot.width * ratio + "px;height:" + hotspot.height * ratio + "px;position:absolute; \"><video width='" + hotspot.width * ratio + "' height='" + hotspot.height * ratio + "' controls='controls' id='embeddedVideo'><source src=\"../../videos/" + targetObject.filename + "\" type=\"video/mp4\" /></video></div>");
				} else {
					if (targetObject != null && targetObject.category != null && (targetObject.category == "surveys" || targetObject.category == "zip") && hotspot.secondParameter == "1") {
						$('body').append("<div style=\"top:" + hotspot.y * ratio + "px;left:" + hotspot.x * ratio + "px;width:" + hotspot.width * ratio + "px;height:" + hotspot.height * ratio + "px;position:absolute;overflow:scroll;-webkit-overflow-scrolling: touch;\"><iframe src='../../" + targetObject.category + "/" + targetObject.filename.replace(".zip", "/index.html") + "' width=" + hotspot.width * ratio + " height=" + hotspot.height * ratio + " frameborder=0></iframe></div>");
					} else {
						if(hotspot.actionID=="exitPres" && hotspot.actionParameter==1){
							$('body').bind('touchstart', function(e){
									closePresentation();
								e.preventDefault();
								});
								$('body').bind('touchend', function(e){
									closePresentation();
								});
						}
						else{
							if(hotspot.actionID=="goBack" && hotspot.actionParameter==1){
								$('body').bind('touchstart', function(e){
									goBack();
									e.preventDefault();
									});
							}
							else{
								$('body').append("<div onClick=\"" + launchString + "\" style=\"top:" + hotspot.y * ratio + "px;left:" + hotspot.x * ratio + "px;width:" + hotspot.width * ratio + "px;height:" + hotspot.height * ratio + "px;position:absolute; \" class='hotspot'></div>");
							}
						
					}

						
					}

				}

			}
		}
		if (slideJSON.notes != null && slideJSON.notes != "") {
			$('body').append("<div class=\"notesArea\" onClick=\"showNotes();\" style=\"top:0px;left:974px;position:absolute; \"><img height=\"40\" src=\"note.png\"></div><div class=\"notes\" onClick=\"closeNotes();\">" + slideJSON.notes + "</div>");

		} else {

		}

	}
	
	if (slideJSON.isAnimated == true) {
		$('body').append("<div id='animationButton' onClick=\"goToAnimation();\" style=\"position:absolute; top:0px;left:0px;width:40px; height:40px;\" ><img src=\"animation.png\" height=\"40\" ></div>");
		$("#animationButton").hide();
	}

	addVideoListeners();
}

function sendCLM(event) {
	var touch = event.touches[0];
	if (touch.pageX < 50) Ti.App.fireEvent('sendCLMPoint', {
		'pX': touch.pageX,
		'pY': touch.pageY
	});
}




function showHotSpots() {
	$(".hotspot").removeClass("visibleHotSpot").addClass("visibleHotSpot");
	isPitching = false;
}

function hideHotSpots() {
	$(".hotspot").removeClass("visibleHotSpot");
	isPitching = true;
}

function showNotes() {
	if (notesShown) {
		$(".notes").hide();
		notesShown = false;
	} else {
		$(".notes").show();
		notesShown = true;
	}
}

function closeNotes() {
	notesShown = false;
	$(".notes").hide();
}

var isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|Windows Phone|Tizen|Bada)/);

/**
* Adds the possibility to auto scroll through sections on touch devices.
*/
function addTouchHandler(){
	if(isTouchDevice || isTouch){
		//Microsoft pointers
		MSPointer = getMSPointer();

		$(document).off('touchstart ' +  MSPointer.down).on('touchstart ' + MSPointer.down, touchStartHandler);
		$(document).off('touchmove ' + MSPointer.move).on('touchmove ' + MSPointer.move, touchMoveHandler);
	}
}

/**
* Removes the auto scrolling for touch devices.
*/
function removeTouchHandler(){
	if(isTouchDevice || isTouch){
		//Microsoft pointers
		MSPointer = getMSPointer();

		$(document).off('touchstart ' + MSPointer.down);
		$(document).off('touchmove ' + MSPointer.move);
	}
}


/*
* Returns and object with Microsoft pointers (for IE<11 and for IE >= 11)
* http://msdn.microsoft.com/en-us/library/ie/dn304886(v=vs.85).aspx
*/
function getMSPointer(){
	var pointer;

	//IE >= 11
	if(window.PointerEvent){
		pointer = { down: "pointerdown", move: "pointermove"};
	}

	//IE < 11
	else{
		pointer = { down: "MSPointerDown", move: "MSPointerMove"};
	}

	return pointer;
}

function touchStartHandler(event){
	parent.$.fn.fullpage.touchStartHandler(event);
}

function touchMoveHandler(event){
	parent.$.fn.fullpage.touchMoveHandler(event);
}

(function() {
	var _alert = window.alert;                   // <-- Reference
	window.alert = function(message,title) {
		// do something additional
			if(title==null){
				title = '';
			}
			Ti.App.fireEvent("showAlertBox",{"title":title,"message":message});
		
		//return _alert.apply(this, arguments);  // <-- The universal method
		// Suits for this case
	};
	})();
	
	function pitcherCanClose() {
		return true;
	}